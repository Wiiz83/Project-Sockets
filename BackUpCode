#1 : LOG Serv ----------------------------------------------------------------------------------

public void run() {
		logger.info("***** LOG Server Starting *****");
		while (keepProcessing) {		
			try {
				socketEcoute = new ServerSocket(port);
				Socket socket = socketEcoute.accept();
				logger.info("LOG Server got client");
				process(socket);
				System.out.println(socketEcoute + "" + socket);
			} catch (Exception e) {
				handle(e);
			}
		}
	}
	
	void process(Socket socket) {
		if (socket == null)
			return;

		Runnable clientHandler = new Runnable() {
			public void run() {
				try {
					logger.info("LOG Server getting message");
					BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
					String req = br.readLine();
					logger.info("LOG Server got message : " + req);
					//Thread.sleep(1000);
					//closeIgnoringException(socket);
					System.out.println(socketEcoute + "" + socket);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		};
		Thread clientConnection = new Thread(clientHandler);
		clientConnection.start();
	}
  
  
#1 : TCP Serv ----------------------------------------------------------------------------------
  	public void run() {
		logger.info("***** TCP Server Starting *****");
		while (keepProcessing) {
			try {
				socketEcoute = new ServerSocket(port);
				Socket socket = socketEcoute.accept();
				logger.info("TCP Server got client");
				process(socket);
			} catch (Exception e) {
				handle(e);
			}
		}
	}
		void process(Socket socket) {
		if (socket == null)
			return;

		Runnable clientHandler = new Runnable() {
			public void run() {
				try {
					logger.info("TCP Server getting message");
					BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
					PrintStream ps = new PrintStream(socket.getOutputStream());
					String req = br.readLine();
					logger.info("TCP Server got message : " + req);
					//Thread.sleep(1000);
					String rep = gp.traiterReq(req);
					logger.info("TCP Server sending reply : " + rep);
					String[] tab = req.split(" ");
					JsonLogger.log("127.0.0.1", port, "TCP", tab[0], tab[1], rep);
					ps.println(rep);
					logger.info("TCP Server reply sent");
					closeIgnoringException(socket);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		};
		Thread clientConnection = new Thread(clientHandler);
		clientConnection.start();
	}
  
#1 : TCP Serv ----------------------------------------------------------------------------------
package serveur;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;

import org.apache.log4j.Logger;

import services_auth.GestionProtocole;
import services_log.JsonLogger;

public class TCPServeur implements Runnable {
	private GestionProtocole gp;
	private int port;
	private JsonLogger jl;
	private ServerSocket socketEcoute;
	volatile boolean keepProcessing = true;
	private static Logger logger = Logger.getLogger(TCPServeur.class);

	/*** Server Constructor ****/
	public TCPServeur(GestionProtocole gp, int port, JsonLogger jl) {
		this.gp = gp;
		this.port = port;
		this.jl = jl;
	}

	/*** Server Launcher ****/
	public void run() {
		logger.info("***** TCP Server starting *****");
		try {
			socketEcoute = new ServerSocket(port);
			while (keepProcessing) {
				Socket socket = socketEcoute.accept();
				Runnable clientHandler = new Runnable() {
					public void run() {
						try {
							logger.info("Le serveur TCP accepte une connexion");
							BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
							PrintStream ps = new PrintStream(socket.getOutputStream());
							String req = br.readLine();
							String rep = gp.traiterReq(req); // appel de gestionprotocol pour traiter la requete

							String[] tab = req.split(" ");
							JsonLogger.log("127.0.0.1", port, "TCP", tab[0], tab[1], rep);
							
							ps.println(rep); // r�ponse de la requ�te du client
							socket.close();
						} catch(Exception ex) {
							// erreur de connexion
							System.err.println("Une erreur est survenue : "+ex);
							ex.printStackTrace();
						}
					}
				};
				Thread clientConnection = new Thread(clientHandler);
				Thread.sleep(1000);
				clientConnection.start();
			}
		} catch (IOException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} 
	}
	
	private void handle(Exception e) {
		if (!(e instanceof SocketException)) {
			e.printStackTrace();
		}
	}
	
	public void stopProcessing() {
		keepProcessing = false;
		closeIgnoringException(socketEcoute);
	}
	
	private void closeIgnoringException(Socket socket) {
		if (socket != null)
			try {
				socket.close();
			} catch (IOException ignore) {
			}
	}

	private void closeIgnoringException(ServerSocket serverSocket) {
		if (serverSocket != null)
			try {
				serverSocket.close();
			} catch (IOException ignore) {
			}
	}

}

#1 : TCP Serv ----------------------------------------------------------------------------------
package serveur;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;

import org.apache.log4j.Logger;

import services_auth.GestionProtocole;
import services_log.JsonLogger;

public class TCPServeur implements Runnable {
	private GestionProtocole gp;
	private int port;
	private JsonLogger jl;
	private ServerSocket socketEcoute;
	volatile boolean keepProcessing = true;
	private static Logger logger = Logger.getLogger(TCPServeur.class);

	/*** Server Constructor ****/
	public TCPServeur(GestionProtocole gp, int port, JsonLogger jl) {
		this.gp = gp;
		this.port = port;
		this.jl = jl;
	}

	/*** Server Launcher ****/
	public void run() {
		logger.info("Le serveur TCP démarre");
		try {
			socketEcoute = new ServerSocket(port);
			processTCP();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		Runnable TCPHandler = new Runnable() {
			public void run() {
				
			}
		};
		Thread TCPConnection = new Thread(TCPHandler);
		TCPConnection.start();
	}

	public void processTCP() {
		while (keepProcessing) {
			try {
				Socket socket = socketEcoute.accept();
				Runnable clientHandler = new Runnable() {
					public void run() {
						try {
							logger.info("Le serveur TCP accepte une connexion");
							BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
							PrintStream ps = new PrintStream(socket.getOutputStream());
							String req = br.readLine();
							System.out.println("Req  test : " + req);
							String rep = gp.traiterReq(req); // appel de gestionprotocol pour traiter la requete

							String[] tab = req.split(" ");
							JsonLogger.log("127.0.0.1", port, "TCP", tab[0], tab[1], rep);
							
							ps.println(rep); // r�ponse de la requ�te du client
							socket.close();
						} catch(Exception ex) {
							// erreur de connexion
							System.err.println("Une erreur est survenue : "+ex);
							ex.printStackTrace();
						}
					}
				};
				Thread clientConnection = new Thread(clientHandler);
				Thread.sleep(1000); 
				clientConnection.start();
			} catch (Exception e) {
				handle(e);
			}
		}
	}
	
	private void handle(Exception e) {
		if (!(e instanceof SocketException)) {
			e.printStackTrace();
		}
	}
	
	public void stopProcessing() {
		keepProcessing = false;
		closeIgnoringException(socketEcoute);
	}
	
	private void closeIgnoringException(Socket socket) {
		if (socket != null)
			try {
				socket.close();
			} catch (IOException ignore) {
			}
	}

	private void closeIgnoringException(ServerSocket serverSocket) {
		if (serverSocket != null)
			try {
				serverSocket.close();
			} catch (IOException ignore) {
			}
	}

}

#1 : TCP Serv ----------------------------------------------------------------------------------


	/*** Server Launcher ****/
	public void run() {
		logger.info("***** TCP Server starting *****");
		try {
			socketEcoute = new ServerSocket(port);
			logger.debug(socketEcoute);
			while (keepProcessing) {
				Socket socket = socketEcoute.accept();
			
					Runnable clientHandler = new Runnable() {
						public void run() {
							if(socket.isClosed() == false) {
								try {
									logger.debug(socket);
	
									logger.info("Le serveur TCP accepte une connexion");
									logger.info(socket);
									BufferedReader br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
									PrintStream ps = new PrintStream(socket.getOutputStream());
									String req = br.readLine();
									String rep = gp.traiterReq(req); // appel de gestionprotocol pour traiter la requete
	
									String[] tab = req.split(" ");
									JsonLogger.log("127.0.0.1", port, "TCP", tab[0], tab[1], rep);
									
									ps.println(rep); // r�ponse de la requ�te du client
									socket.close();
								} catch(Exception ex) {
									// erreur de connexion
									System.err.println("Une erreur est survenue : "+ex);
									ex.printStackTrace();
								}
							}
						}
					};
					Thread clientConnection = new Thread(clientHandler);
					//Thread.sleep(1000);
					clientConnection.start();
			
			}
		} catch (IOException e) {
			e.printStackTrace();
		} //catch (InterruptedException e) {
		//	e.printStackTrace();
		//} 
	}

#1 : UDP Serv ----------------------------------------------------------------------------------

  @Override
	public void run() {
		logger.info("***** UDP Server starting *****");
		byte[] tampon = new byte[Main.taille];
		try {
			DatagramSocket ds = new DatagramSocket(port);
			while (true) {
				DatagramPacket dp = new DatagramPacket(tampon, tampon.length);
				try {
					ds.receive(dp);
					//JsonLogger.logInfo("Le serveur UDP accepte une connexion");
					String req = new String(tampon, 0, dp.getLength()); // extraction de la requete
					String rep = gp.traiterReq(req); // appel gestionprotocol pour traiter la requete
					dp.setData(rep.getBytes());
					
					String[] tabUDP = req.split(" ");
					JsonLogger.log(dp.getAddress().toString(), port, "UDP", tabUDP[0], tabUDP[1], rep);
					
					ds.send(dp);
				} catch (IOException e) {
					e.printStackTrace();
					ds.close();
				}
			}
		} catch (SocketException e) {
			logger.error("An error creating or accessing a Socket has occurred", e);
		}
	}
